{"version":3,"sources":["components/Square.tsx","Utils/opponentAI.ts","Utils/chooseRandomPlayer.ts","pages/Board.tsx","Utils/calculateWinner.ts","App.tsx","index.tsx"],"names":["Square","value","onClick","taken","className","isBoardFilled","squares","i","length","minimax","isMax","player","opponent","square","score","bestOption","findBestSquare","players","chooseRandomPlayer","Math","floor","random","Board","useState","Array","fill","board","setBoard","setPlayer","currentPlayer","setCurrentPlayer","winner","boardLineWinnings","a","b","c","calculateWinner","handleClick","useCallback","tempBoard","prevState","useEffect","move","randomTime","playerTimer","setTimeout","clearTimeout","map","App","ReactDOM","render","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.ad39c739.chunk.js","sourcesContent":["import React, { ReactElement } from 'react';\n\ninterface SquareProps {\n  value: string | null;\n  onClick?: (e: unknown) => void;\n  taken: boolean;\n}\n\nconst Square = ({ value, onClick, taken }: SquareProps): ReactElement => {\n  return (\n    <div\n      className={`Square ${value === 'X' ? 'xNext' : 'oNext'} ${\n        taken ? '' : 'free'\n      }`}\n      onClick={onClick}>\n      <p className=\"value\">{value}</p>\n    </div>\n  );\n};\n\nexport default Square;\n","export const isBoardFilled = (squares: string[] | null[]) => {\n  for (let i = 0; i < squares.length; i++) {\n    if (squares[i] === null) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport const minimax = (\n  squares: string[] | null[],\n  isMax: number | boolean,\n  player: string\n) => {\n  const opponent = player === 'X' ? 'O' : 'X';\n\n  if (isBoardFilled(squares)) return { square: -1, score: 0 };\n\n  // Initialize 'best'. If isMax, we want to maximize score, and minimize otherwise.\n  const bestOption = { square: -1, score: isMax ? -1000 : 1000 };\n\n  // Loop through every square on the board\n  for (let i = 0; i < squares.length; i++) {\n    // If square is already filled, it's not a valid move so skip it\n    if (squares[i]) {\n      continue;\n    }\n\n    squares[i] = isMax ? player : opponent;\n\n    const score = minimax(squares, !isMax, player).score;\n\n    // This will undo the move\n    squares[i] = null;\n\n    if (isMax) {\n      // Maximizing player; track the largest score and move.\n      if (score > bestOption.score) {\n        bestOption.score = score;\n        bestOption.square = i;\n      }\n    } else {\n      // Minimizing opponent; track the smallest score and move.\n      if (score < bestOption.score) {\n        bestOption.score = score;\n        bestOption.square = i;\n      }\n    }\n  }\n\n  // The move that leads to the best score at end game.\n  return bestOption;\n};\n\nexport const findBestSquare = (squares: string[], player: string) => {\n  // The best move for the 'player' given current board\n  return minimax(squares, true, player).square;\n};\n","const players = ['X', 'O'];\n\nexport const chooseRandomPlayer = (): string => {\n    return players[Math.floor(Math.random() * players.length)];\n  };\n  ","import React, { ReactElement, useCallback, useEffect, useState } from 'react';\nimport Square from '../components/Square';\nimport { calculateWinner } from '../Utils/calculateWinner';\nimport { chooseRandomPlayer } from '../Utils/chooseRandomPlayer';\nimport { findBestSquare } from '../Utils/opponentAI';\n\nconst Board = (): ReactElement => {\n  const [board, setBoard] = useState(Array(9).fill(null));\n\n  const [player, setPlayer] = useState(chooseRandomPlayer());\n\n  const [currentPlayer, setCurrentPlayer] = useState('X');\n  const winner = calculateWinner(board);\n\n  const handleClick = useCallback(\n    (i: number): void => {\n      const tempBoard = [...board];\n      // If user click an occupied square or if game is won, return\n      if (winner || tempBoard[i]) return;\n      // Put an X or an O in the clicked square\n      tempBoard[i] = currentPlayer;\n      setBoard(tempBoard);\n\n      setCurrentPlayer((prevState) => (prevState === 'X' ? 'O' : 'X'));\n    },\n    [board, currentPlayer, winner]\n  );\n\n  const setupBoard = (): void => {\n    setBoard(Array(9).fill(null));\n    setPlayer(chooseRandomPlayer());\n  };\n\n  useEffect(() => {\n    if (currentPlayer !== player) {\n      let move = findBestSquare(board, player);\n\n      // Calculating a random time to simulate opponent delay\n      const min = 400;\n      const max = 1000;\n      const randomTime = Math.floor(Math.random() * (max - min + 1) + min);\n\n      const playerTimer = setTimeout((): void => {\n        handleClick(move);\n      }, randomTime);\n\n      return (): void => {\n        clearTimeout(playerTimer);\n      };\n    }\n  }, [currentPlayer, player, board, handleClick]);\n\n  return (\n    <>\n      <div className=\"playerContainer\">\n        <span>You're player is</span> <Square value={player} taken />\n      </div>\n      {!winner ? (\n        <div className=\"playerContainer\">\n          <span>It's</span> <Square value={currentPlayer} taken />\n          <span>turn!</span>\n        </div>\n      ) : (\n        <div className=\"playerContainer\">\n          {winner === 'Draw' ? (\n            <span>It's a Draw</span>\n          ) : (\n            <>\n              <span>Winner is</span> <Square value={winner} taken />\n            </>\n          )}\n        </div>\n      )}\n      <div className=\"Board\">\n        {board.map((square, i) => (\n          <Square\n            key={i}\n            value={square}\n            onClick={() => {\n              if (currentPlayer === player) handleClick(i);\n            }}\n            taken={square != null}\n          />\n        ))}\n      </div>\n      <div className=\"resetButton\" onClick={setupBoard}>\n        RESET GAME\n      </div>\n    </>\n  );\n};\n\nexport default Board;\n","import { isBoardFilled } from './opponentAI';\n\nexport const calculateWinner = (squares: string[] | null[]): string | null => {\n  const boardLineWinnings = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < boardLineWinnings.length; i++) {\n    const [a, b, c] = boardLineWinnings[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  if (isBoardFilled(squares)) return 'Draw';\n  return null;\n};\n","import React from 'react';\nimport './App.css';\nimport Board from './pages/Board';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}